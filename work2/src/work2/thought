首先，Proxy代理模式是一种结构型设计模式，主要解决的问题是：在直接访问对象时带来的问题

代理是一种常用的设计模式，其目的就是为其他对象提供一个代理以控制对某个对象的访问。代理类负责为委托类预处理消息，过滤消息并转发消息，

以及进行消息被委托类执行后的后续处理。          
       
更通俗的说，代理解决的问题当两个类需要通信时，引入第三方代理类，让我们只了解代理类即可，而且代理的出现还可以让我们完成与另一个类之间

的关系的统一管理，但是，代理类和委托类要实现相同的接口，因为代理真正调用的还是委托类的方法。

其次，关于静态代理和动态代理：

1.静态和动态代理使客户端不需要知道实现类是什么，怎么做的，而客户端只需知道代理类就可以.

2.动态代理与静态代理相比较，除了效率较静态代理低外，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler.invoke）

这样，在接口方法数量比较多的时候，我们可以进行灵活处理，而不需要像静态代理那样（静态代理类和委托类实现了相同的接口，代理类通过委托类实现了相同的方法。这样就出现了

大量的代码重复。如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度，并且静态代理对象只服务于一种类型的对象，

如果要服务多类型的对象。势必要为每一种对象都进行代理，静态代理在程序规模稍大时就无法胜任了）。而动态代理是在运行时，通过反射机制实现动态代理，并且能够代理各种类型

的对象，动态代理的应用使类职责更加单一，复用性更强。





